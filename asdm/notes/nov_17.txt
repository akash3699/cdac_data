* images
- pre-built images
  - from docker hub
- custom image
  - committing an image
    - creating an image from another image using commit command
    
    > docker container commit <container id> <image name>


  - using Dockerfile
    - will create an image from the code


* For MySQL

- to create a container from MySQL:5.7 with root user's password as root

  > docker container run -itd -p 9099:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=app_db --name mydb mysql:5.7

- to connect to the MySQL running inside the container

  > mysql -u root -h localhost --port=9099 --protocol=tcp -p

- schema

create table product (id integer primary key auto_increment, title varchar(100), description varchar(500), price float, category_id integer);

create table category  (id integer primary key auto_increment, title varchar(100));



* Dockerfile

- file which will create a docker image
- by executing the commands inside the dockerfile
- commands
  - FROM:
    - specifies the base image name
    - e.g.

      FROM httpd

    
  - COPY:
    - copy a file from local machine to container 
    - syntax

      COPY <local machine path> <container path>

    - e.g.

      # copy the file index.html to /usr/local/apache2/htdocs/
      COPY index.html /usr/local/apache2/htdocs/


  - EXPOSE
    - used to open the port
    - e.g
 
      EXPOSE 80


  - CMD
    - used to execute a command inside the container at container startup
    - e.g

      CMD date
      CMD apachectl -D FOREGROUND


* workflow to automate the containerised application

- remove the container if it is already running

  > docker container rm <container name>

- remove the existing image

  > docker image rm <image name>

- build an image

  > docker image build -t <image name> .

- run a container using the built image

  > docker container run <parameters> <image name>


      















